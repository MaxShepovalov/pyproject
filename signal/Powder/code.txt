https://github.com/simtr/The-Powder-Toy/blob/master/src/client/GameSave.cpp

A*B
1111 = 15
1111 = 15

00001111 = 15
00011110 = 30
00111100 = 60
01111000 = 120
--------
00101101
00111100
01111000
--------
01101001
01111000
--------
11100001

=2^8+2^7+2^6+1 = 128+64+32+1 = 160+65=225

 1111
x1111

Code		|Result
A <= L1		|00001111 #first value
B <= L2		|00001111 #second value
R = 00		|00000000 #temporary result
Y = 0		|00000000 #index
M = B[Y]	|11111111 #mem buffer
F = A*M		|00001111 #additional value
R = R + F	|00001111 #calc result
A = A << 1	|00011110 #shift first value
Y = Y + 1	|00000001 #increment index
M = B[Y]	|11111111 #mem
F = A*M		|00011110 #add
R = R + F	|00101101 #reslut
A = A << 1	|00111100 #shift
Y = Y + 1	|00000010 #increment
M = B[Y]	|11111111 #mem
F = A*M		|00111100 #add
R = R + F	|01101001 #result
A = A << 1	|01111000 #shift
Y = Y + 1	|00000011 #incr
M = B[Y]	|11111111 #mem
F = A*M		|01111000 #add
R = R + F	|11100001 #result
R => out	|11100001 #write out

A <= L1		|load from L1
B <= L2		|load from L2
R = 00		|load num
Y = 00		|load num
LINK 1		|set link
M = B[Y]	|getbit
F = A&M 	|and
R = R + F 	|add
A = A << 1	|shiftL
Y = Y + 1	|add
ifn A==3,1	|if not goto link
R => out	|send to out


0000 load from addr
0001 load from num
0010 send to addr
0011 set link
0100 stop
0101 getbit
0110 and
0111 or
1000 add
1001 invert
1010 shiftL
1011 shiftR
1100 if
1101 ifn
1110
1111


Stamp file
##
00 50 P
01 53 S
02 76 v
03 00 [gravityEnable, airMode, airMode, airMode, gravityMode, gravityMode, paused, legacyEnable]
04 4a version
05 04 sould be equal to CELL (which is 4)
06 01 bw - block width
07 05 bh - bloack hight
08 ae i4  -\
09 02 i3  --\ data size i = i1<<24 | i2<<16 | i3<<8 | i4
10 00 i2  --/
11 00 i1  -/
12 42 ------V--------
13 5a   compressed data from 12
14 68   use BZ2_bzBuffToBuffDecompress to read
15 39	bzlib.h
16 31 
17 41 
18 59 
19 26 
20 53 
21 59 
22 ca 
23 e3 
24 8d 
25 e5 
26 00 
27 00 
28 00 
29 d9 
30 c0 
31 e0
32 03 
33 0c 
34 80 
35 01 
36 00 
37 40 
38 00 
39 00 
40 00 
41 80 
42 02 
43 00 
44 08 
45 20 
46 00 
47 31
48 03 
49 40 
50 d0 
51 11 
52 53 
53 41 
54 a6 
55 9a 
56 73 
57 17 
58 50 
59 b3 
60 da 
61 56 
62 b4 
63 4a
64 03 
65 71 
66 93 
67 0d 
68 08 
69 3b 
70 15 
71 81 
72
7d 
73 61 
74 0f 
75 c5 
76 dc 
77 91 
78 4e 
79 14
80 24 
81 32 
82 b8 
83 e3 
84 79 
85 40 
86 
87 
88 
89 


0000 01

0000000000000000 00000001
\x00\x00\x01 <- 1 particle in cell


write thru Ctype
7d <- FILT
20 <- Temp
00 <- Temp2
01 <- 
01 <- Ctype
7d 20 00 01 01
7d 20 00 01 02
7d 20 00 01 04
7d 20 00 01 08
7d 20 00 01 10
7d 20 00 01 20
7d 20 00 01 40
7d 20 00 01 80
7d 20 02 01 00 00 00 01
7d 20 02 01 00 00 00 02
7d 20 02 01 00 00 00 04
7d 20 02 01 00 00 00 08
7d 20 02 01 00 00 00 10
7d 20 02 01 00 00 00 20
7d 20 02 01 00 00 00 40
7d 20 02 01 00 00 00 80
7d 20 02 01 00 00 01 00
7d 20 02 01 00 00 02 00
7d 20 02 01 00 00 04 00
7d 20 02 01 00 00 08 00
7d 20 02 01 00 00 10 00
7d 20 02 01 00 00 20 00
7d 20 02 01 00 00 40 00
7d 20 02 01 00 00 80 00
7d 20 02 01 00 01 00 00
7d 20 02 01 00 02 00 00
7d 20 02 01 00 04 00 00
7d 20 02 01 00 08 00 00
7d 20 02 01 00 10 00 00
7d 20 02 01 00 20 00 00




7d 20 00 01 01			<-1
7d 20 02 01 02 00 00 10 <-4098
7d 20 02 01 ff 7f ff ff <-7fffffff



7d 20 00 01 01		    | 7d 20 00 01 01
7d 20 00 01 02		    | 7d 20 00 01 02
7d 20 00 01 04		    | 7d 20 00 01 04
7d 20 00 01 08		    | 7d 20 00 01 08
7d 20 00 01 10		    | 7d 20 00 01 10
7d 20 00 01 20		    | 7d 20 00 01 20
7d 20 00 01 40		    | 7d 20 00 01 40
7d 20 00 01 80		    | 7d 20 00 01 80
7d 20 02 01 00 00 00 01 | 7d 20 02 01 00 00 00 01
7d 20 02 01 00 00 00 02 | 7d 20 02 01 00 00 00 02
7d 20 02 01 00 00 00 04 | 7d 20 02 01 00 00 00 04
7d 20 02 01 00 00 00 08 | 7d 20 02 01 00 00 00 08
7d 20 02 01 00 00 00 10 | 7d 20 02 01 00 00 00 10
7d 20 02 01 00 00 00 20 | 7d 20 02 01 00 00 00 20
7d 20 02 01 00 00 00 40 | 7d 20 02 01 00 00 00 40
7d 20 02 01 00 00 00 80 | 7d 20 02 01 00 00 00 80
7d 20 02 01 00 00 01 00 | 7d 20 02 01 00 00 01 00
7d 20 02 01 00 00 02 00 | 7d 20 02 01 00 00 02 00
7d 20 02 01 00 00 04 00 | 7d 20 02 01 00 00 04 00
7d 20 02 01 00 00 08 00 | 7d 20 02 01 00 00 08 00
7d 20 02 01 00 00 10 00 | 7d 20 02 01 00 00 10 00
7d 20 02 01 00 00 20 00 | 7d 20 02 01 00 00 20 00
7d 20 02 01 00 00 40 00 | 7d 20 02 01 00 00 40 00
7d 20 02 01 00 00 80 00 | 7d 20 02 01 00 00 80 00
7d 20 02 01 00 01 00 00 | 7d 20 02 01 00 01 00 00
7d 20 02 01 00 02 00 00 | 7d 20 02 01 00 02 00 00
7d 20 02 01 00 04 00 00 | 7d 20 02 01 00 04 00 00
7d 20 02 01 00 08 00 00 | 7d 20 02 01 00 08 00 00
7d 20 02 01 00 10 00 00 | 7d 20 02 01 00 10 00 00
7d 20 02 01 00 20 00 00 | 7d 20 02 01 00 20 00 00
7d 20 02 01 00 40 00 00 | 
7d 20 02 01 00 80 00 00 | 




def printhex(line):
	k = 0
	pline = ""
	while k<len(line):
		num = hex(ord(line[k]))[2:]
		if len(num)==1:
			num = "0" + num
		pline += num
		k += 1
		if not k%16:
			pline += "\n"
		elif not k%2:
			pline += " "
	print pline
